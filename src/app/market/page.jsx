'use client';
import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import './market.css';
import NavComp from '../components/NavComp';
import Footer from '../components/Footer';

export default function MarketPage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [topCoins, setTopCoins] = useState([]);
  const [earnCoins, setEarnCoins] = useState([]);
  const [allCoins, setAllCoins] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showSearchResults, setShowSearchResults] = useState(false);
  const searchContainerRef = useRef(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
  const formatPrice = (price) => {
    const numPrice = Number.parseFloat(price);
    if (numPrice >= 1000) {
      return numPrice.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
    } else if (numPrice >= 10) {
      return numPrice.toFixed(2);
    } else if (numPrice >= 0.1) {
      return numPrice.toFixed(3);
    } else {
      return numPrice.toFixed(6);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
  const fetchCryptoData = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö —Å Binance
      const response = await fetch(
        'https://api.binance.com/api/v3/ticker/24hr'
      );
      const data = await response.json();

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ –∏—Å–∫–ª—é—á–∞–µ–º –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã
      const usdtPairs = data.filter(
        (pair) =>
          pair.symbol.endsWith('USDT') &&
          !pair.symbol.includes('UP') &&
          !pair.symbol.includes('DOWN') &&
          !pair.symbol.includes('BEAR') &&
          !pair.symbol.includes('BULL')
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
      const formattedAllCoins = usdtPairs.map((pair) => ({
        pair: pair.symbol.replace('USDT', '/USDT'),
        symbol: pair.symbol.replace('USDT', ''),
        price: formatPrice(pair.lastPrice),
        change:
          Number.parseFloat(pair.priceChangePercent) >= 0
            ? `+${Number.parseFloat(pair.priceChangePercent).toFixed(2)}%`
            : `${Number.parseFloat(pair.priceChangePercent).toFixed(2)}%`,
        isPositive: Number.parseFloat(pair.priceChangePercent) >= 0,
        volume: Number.parseFloat(pair.quoteVolume),
      }));

      setAllCoins(formattedAllCoins);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö –º–æ–Ω–µ—Ç
      const sortedByVolume = [...formattedAllCoins].sort(
        (a, b) => b.volume - a.volume
      );

      // –ë–µ—Ä–µ–º —Ç–æ–ø-9 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤
      const top9Pairs = sortedByVolume.slice(0, 9);
      setTopCoins(top9Pairs);

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–µ–π–∫–∏–Ω–≥–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å API)
      const stakingYields = {
        BTC: 4.2,
        ETH: 5.5,
        SOL: 7.8,
        DOT: 12.0,
        AVAX: 9.8,
        MATIC: 10.5,
        ATOM: 15.2,
        BNB: 8.4,
        ADA: 5.1,
      };

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "Top Earn"
      const earnData = formattedAllCoins
        .slice(0, 20)
        .map((coin) => {
          return {
            symbol: coin.symbol.charAt(0),
            name: coin.symbol,
            apy: `+${(
              stakingYields[coin.symbol] || Math.random() * 5 + 1
            ).toFixed(2)}%`,
            apyValue: stakingYields[coin.symbol] || Math.random() * 5 + 1,
          };
        })
        .sort((a, b) => b.apyValue - a.apyValue)
        .slice(0, 3);

      setEarnCoins(earnData);
      setIsLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setSearchResults([]);
      return;
    }

    const query = searchQuery.toLowerCase();
    const results = allCoins
      .filter(
        (coin) =>
          coin.pair.toLowerCase().includes(query) ||
          coin.symbol.toLowerCase().includes(query)
      )
      .slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    setSearchResults(results);
  }, [searchQuery, allCoins]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchCryptoData();

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const intervalId = setInterval(fetchCryptoData, 30000);

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => clearInterval(intervalId);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  useEffect(() => {
    function handleClickOutside(event) {
      if (
        searchContainerRef.current &&
        !searchContainerRef.current.contains(event.target)
      ) {
        setShowSearchResults(false);
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [searchContainerRef]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã –≤ —Ç–æ–ø
  const addCoinToTop = (coin) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ –º–æ–Ω–µ—Ç–∞ –≤ —Ç–æ–ø–µ
    const existingIndex = topCoins.findIndex((c) => c.pair === coin.pair);

    if (existingIndex === -1) {
      // –ï—Å–ª–∏ –º–æ–Ω–µ—Ç—ã –Ω–µ—Ç –≤ —Ç–æ–ø–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∏ —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
      const newTopCoins = [coin, ...topCoins.slice(0, 8)];
      setTopCoins(newTopCoins);
    }

    setSearchQuery('');
    setShowSearchResults(false);
  };

  // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ø–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
  const coinsPerColumn = Math.ceil(topCoins.length / 3);
  const column1 = topCoins.slice(0, coinsPerColumn);
  const column2 = topCoins.slice(coinsPerColumn, coinsPerColumn * 2);
  const column3 = topCoins.slice(coinsPerColumn * 2);

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
  if (isLoading) {
    return (
      <div className="market-page">
        <div className="market-header">
          <Link href="/" className="back-link">
            ‚Üê Back
          </Link>
        </div>
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <div className="loading-text">Loading market data...</div>
        </div>
      </div>
    );
  }

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
  if (error) {
    return (
      <div className="market-page">
        <div className="market-header">
          <Link href="/" className="back-link">
            ‚Üê Back
          </Link>
        </div>
        <div className="error-container">
          <div className="error-message">{error}</div>
          <button className="retry-button" onClick={fetchCryptoData}>
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="market-main">
      <NavComp></NavComp>{' '}
      <div className="market-page">
        <div className="market-header">
          <Link href="/" className="back-link">
            ‚Üê Back
          </Link>
        </div>

        <div className="search-container" ref={searchContainerRef}>
          <div className="search-bar">
            <div className="search-icon">üîç</div>
            <input
              type="text"
              placeholder="Search any cryptocurrency..."
              value={searchQuery}
              onChange={(e) => {
                setSearchQuery(e.target.value);
                setShowSearchResults(true);
              }}
              onFocus={() => setShowSearchResults(true)}
              className="search-input"
            />
          </div>

          {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ */}
          {showSearchResults && searchResults.length > 0 && (
            <div className="search-results">
              {searchResults.map((coin, index) => (
                <div
                  key={index}
                  className="search-result-item"
                  onClick={() => addCoinToTop(coin)}
                >
                  <div className="result-left">
                    <div className="result-symbol">{coin.symbol}</div>
                    <div className="result-pair">{coin.pair}</div>
                  </div>
                  <div className="result-right">
                    <div className="result-price">{coin.price}</div>
                    <div
                      className={
                        coin.isPositive
                          ? 'result-change positive'
                          : 'result-change negative'
                      }
                    >
                      {coin.change}
                    </div>
                  </div>
                </div>
              ))}
              <div className="search-footer">
                <div className="search-tip">
                  Click on a cryptocurrency to add it to your top list
                </div>
              </div>
            </div>
          )}

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ */}
          {showSearchResults &&
            searchQuery.trim() !== '' &&
            searchResults.length === 0 && (
              <div className="search-results">
                <div className="no-results">
                  No cryptocurrencies found matching "{searchQuery}"
                </div>
              </div>
            )}
        </div>

        <div className="market-content">
          <div className="section">
            <div className="section-header">In Top</div>
            <div className="coin-grid">
              {/* –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
              <div className="coin-column">
                {column1.map((coin, index) => (
                  <Link
                    href={`/coin/${coin.symbol}`}
                    key={`col1-${index}`}
                    className="coin-card"
                  >
                    <div className="coin-info">
                      <div className="coin-pair">{coin.pair}</div>
                      <div className="coin-price">
                        {coin.price}
                        <span
                          className={
                            coin.isPositive
                              ? 'coin-change positive'
                              : 'coin-change negative'
                          }
                        >
                          {coin.change}
                        </span>
                      </div>
                    </div>
                  </Link>
                ))}
              </div>

              {/* –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
              <div className="coin-column">
                {column2.map((coin, index) => (
                  <Link
                    href={`/coin/${coin.symbol}`}
                    key={`col2-${index}`}
                    className="coin-card"
                  >
                    <div className="coin-info">
                      <div className="coin-pair">{coin.pair}</div>
                      <div className="coin-price">
                        {coin.price}
                        <span
                          className={
                            coin.isPositive
                              ? 'coin-change positive'
                              : 'coin-change negative'
                          }
                        >
                          {coin.change}
                        </span>
                      </div>
                    </div>
                  </Link>
                ))}
              </div>

              {/* –¢—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–∫–∞ */}
              <div className="coin-column">
                {column3.map((coin, index) => (
                  <Link
                    href={`/coin/${coin.symbol}`}
                    key={`col3-${index}`}
                    className="coin-card"
                  >
                    <div className="coin-info">
                      <div className="coin-pair">{coin.pair}</div>
                      <div className="coin-price">
                        {coin.price}
                        <span
                          className={
                            coin.isPositive
                              ? 'coin-change positive'
                              : 'coin-change negative'
                          }
                        >
                          {coin.change}
                        </span>
                      </div>
                    </div>
                  </Link>
                ))}
              </div>
            </div>
          </div>

          <div className="section">
            <div className="section-header">Top Earn</div>
            <div className="earn-grid">
              {earnCoins.map((coin, index) => (
                <Link
                  href={`/coin/${coin.name}`}
                  key={index}
                  className="earn-card"
                >
                  <div className="coin-symbol">{coin.symbol}</div>
                  <div className="coin-name">{coin.name}</div>
                  <div className="coin-apy">{coin.apy}</div>
                </Link>
              ))}
            </div>
          </div>
        </div>
      </div>
      <Footer></Footer>
    </div>
  );
}
